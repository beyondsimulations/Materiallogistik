---
title: "Übung 05"
subtitle: "Einmalige und mehrperiodige Bestandsentscheidungen"
jupyter: python3
format:
    html:
        theme: [sandstone, ../styles.scss]
        highlight-style: arrow
        linkcolor: "#a60000"
        echo: false
        code-overflow: wrap
    typst:
        papersize: a4
---

## Aufgabe 1: Das Newsvendor-Problem

Ein Event-Veranstalter plant den Verkauf von T-Shirts für ein einmaliges Open-Air-Konzert. Die Nachfrage nach den T-Shirts ist unsicher und wird als normalverteilt mit einem Erwartungswert von 800 Stück und einer Standardabweichung von 150 Stück geschätzt.

**Kostendaten:**

-   **Einkaufspreis pro T-Shirt:** 10 GE
-   **Verkaufspreis pro T-Shirt:** 25 GE
-   **Rückkaufpreis (Restwert) pro nicht verkäuflichem T-Shirt:** 4 GE (Der Lieferant nimmt unverkäufliche Ware zurück)

**Ihre Aufgaben:**

1.  **Underage- und Overage-Kosten:** Bestimmen Sie die Underage-Kosten ($c_U$) und die Overage-Kosten ($c_O$).
    -   $c_U$: Kosten pro Einheit, die man zu wenig bestellt hat (entgangener Gewinn).
    -   $c_O$: Kosten pro Einheit, die man zu viel bestellt hat (Verlust pro übrig gebliebenem T-Shirt).
2.  **Kritisches Verhältnis:** Berechnen Sie das kritisches Verhältnis (Critical Ratio).
3.  **Optimale Bestellmenge:** Bestimmen Sie die optimale Bestellmenge ($x_{opt}$), die der Veranstalter ordern sollte, um den erwarteten Gewinn zu maximieren.
4.  **Sicherheitsbestand:** Wie hoch ist der resultierende Sicherheitsbestand?

::: {.content-visible when-profile="solution"}
**Lösungshinweise:**

::: {.callout-tip collapse="true" title="Tipps und wichtige Formeln"}
#### 1. Underage- und Overage-Kosten

*   **Underage-Kosten ($c_U$):** Die Kosten für jede nachgefragte Einheit, die Sie nicht bedienen können (Opportunitätskosten).
    `c_U = Verkaufspreis - Einkaufspreis`
*   **Overage-Kosten ($c_O$):** Die Kosten für jede Einheit, die Sie zu viel bestellt haben und die am Ende übrig bleibt.
    `c_O = Einkaufspreis - Restwert`

#### 2. Kritisches Verhältnis (Critical Ratio)

*   Das kritische Verhältnis gibt das Servicelevel an, bei dem der erwartete Gewinn maximiert wird. Es ist die Wahrscheinlichkeit, dass die Nachfrage kleiner oder gleich der optimalen Bestellmenge ist.
*   **Formel:** `Kritisches Verhältnis = c_U / (c_O + c_U)`

#### 3. Optimale Bestellmenge ($x_{opt}$)

*   **Grundidee:** Bestelle so viel, dass die Wahrscheinlichkeit, die Nachfrage zu decken, genau dem kritischen Verhältnis entspricht.
*   **Formel (Normalverteilung):**
    1.  Finde den z-Wert, der dem kritischen Verhältnis entspricht: `z = F^-1(kritisches Verhältnis)`, wobei `F^-1` die inverse kumulative Verteilungsfunktion der Standardnormalverteilung ist.
    2.  Berechne die Bestellmenge: `x_opt = μ + z * σ`

#### 4. Sicherheitsbestand

*   Der Sicherheitsbestand ist die Menge, die über den Erwartungswert der Nachfrage hinaus bestellt wird, um Unsicherheit abzufedern.
*   **Formel:** `Sicherheitsbestand = x_opt - μ`
:::

```{python}
from scipy.stats import norm
import numpy as np

# Gegebene Daten
mu_Y = 800
sigma_Y = 150
einkaufspreis = 10
verkaufspreis = 25
restwert = 4

# 1. Underage- und Overage-Kosten
c_U = verkaufspreis - einkaufspreis
c_O = einkaufspreis - restwert

print("1. Kostenberechnung:")
print(f"   - Underage-Kosten (c_U): {verkaufspreis} - {einkaufspreis} = {c_U} GE")
print(f"   - Overage-Kosten (c_O): {einkaufspreis} - {restwert} = {c_O} GE\n")

# 2. Kritisches Verhältnis
critical_ratio = c_U / (c_O + c_U)

print("2. Kritisches Verhältnis:")
print(f"   - F(x_opt) = {c_U} / ({c_O} + {c_U}) = {critical_ratio:.4f}\n")

# 3. Optimale Bestellmenge
# Wir suchen x_opt, sodass die kumulative Verteilungsfunktion F(x_opt) dem kritischen Verhältnis entspricht.
# x_opt = F^-1(critical_ratio)
# Bei Normalverteilung: x_opt = mu + z * sigma
z_value = norm.ppf(critical_ratio)
x_opt = mu_Y + z_value * sigma_Y

print("3. Optimale Bestellmenge:")
print(f"   - z-Wert für F(x)={critical_ratio:.4f}: {z_value:.4f}")
print(f"   - x_opt = {mu_Y} + {z_value:.4f} * {sigma_Y} = {x_opt:.2f}")
print(f"   -> Der Veranstalter sollte {int(np.ceil(x_opt))} T-Shirts bestellen.\n")

# 4. Sicherheitsbestand
safety_stock = x_opt - mu_Y
print("4. Sicherheitsbestand:")
print(f"   - Sicherheitsbestand = {x_opt:.2f} - {mu_Y} = {safety_stock:.2f} Stück")
```
:::

## Aufgabe 2: Periodische Lagerhaltungspolitik (r, S)

Ein Fachgeschäft für Wander-Ausrüstung verkauft einen speziellen Typ Wanderstiefel. Die Nachfrage ist annähernd normalverteilt. Der Bestand wird alle 4 Wochen (r=4) überprüft. Die Lieferzeit vom Hersteller beträgt konstant 2 Wochen (L=2).

**Daten zur wöchentlichen Nachfrage:**

-   **Erwartungswert ($\mu_D$):** 20 Paar
-   **Standardabweichung ($\sigma_D$):** 8 Paar

Das Geschäft strebt einen $\beta$-Servicegrad von 98% an. Das bedeutet, dass 98% der gesamten Nachfrage direkt aus dem Lager bedient werden soll.

**Ihre Aufgaben:**

1.  **Risikozeitraum:** Bestimmen Sie den Risikozeitraum für diese $(r, S)$-Politik.
2.  **Nachfrageparameter:** Berechnen Sie den Erwartungswert und die Standardabweichung der Nachfrage während des gesamten Risikozeitraums.
3.  **Optimales Bestellniveau:** Bestimmen Sie das optimale Bestellniveau $S_{opt}$. Nehmen Sie zur Vereinfachung an, dass der Fehlmengenanteil direkt aus der Einheiten-Verlustfunktion der Normalverteilung über den gesamten Risikozeitraum $(r+L)$ abgeleitet werden kann.
    $S_{opt} = \mu_{r+L} + v_{opt} \cdot \sigma_{r+L}$, wobei $v_{opt}$ so gewählt wird, dass $G_Z^{(1)}(v_{opt}) \leq \frac{(1-\beta) \cdot r \cdot \mu_D}{\sigma_{r+L}}$.
    *Nutzen Sie die Approximation $G_Z^{(1)}(v) \approx \phi(v) - v \cdot (1-\Phi(v))$.*

::: {.content-visible when-profile="solution"}
**Lösungshinweise:**

::: {.callout-tip collapse="true" title="Tipps und wichtige Formeln"}
#### 1. Risikozeitraum einer (r,S)-Politik

*   Bei einer periodischen Überprüfung müssen wir die Nachfrageunsicherheit über das **Überprüfungsintervall (r)** und die **Wiederbeschaffungszeit (L)** abdecken. Eine Bestellung, die heute aufgegeben wird, muss die Nachfrage decken, bis die *nächste* Bestellung eintrifft.
*   **Formel:** `Risikozeitraum = r + L`

#### 2. Nachfrageparameter im Risikozeitraum

*   Wenn die wöchentliche Nachfrage unabhängig ist, können die Kennzahlen für den gesamten Risikozeitraum einfach berechnet werden:
*   **Erwartungswert:** $\mu_{r+L} = (r+L) \cdot \mu_D$
*   **Varianz:** $\sigma_{r+L}^2 = (r+L) \cdot \sigma_D^2$
*   **Standardabweichung:** $\sigma_{r+L} = \sqrt{r+L} \cdot \sigma_D$

#### 3. Optimales Bestellniveau $S_{opt}$

*   Das Bestellniveau $S$ (auch "order-up-to level") ist der Zielbestand, auf den bei jeder Überprüfung aufgefüllt wird.
*   **Formel:** $S_{opt} = \mu_{r+L} + SS = \mu_{r+L} + v_{opt} \cdot \sigma_{r+L}$
*   Der Sicherheitsfaktor $v_{opt}$ wird so bestimmt, dass der angestrebte $\beta$-Servicegrad erreicht wird. Dafür wird die **standardisierte Einheiten-Verlustfunktion** $G_Z^{(1)}(v)$ verwendet.
*   **Zielbedingung:** Finde das kleinste $v$, für das gilt:
    $G_Z^{(1)}(v) \leq \frac{(1-\beta) \cdot \text{erwartete Nachfrage im Intervall r}}{\sigma_{r+L}} = \frac{(1-\beta) \cdot r \cdot \mu_D}{\sigma_{r+L}}$
*   Da es keine geschlossene Formel zur Umkehrung von $G_Z^{(1)}(v)$ gibt, muss der Wert für $v$ iterativ gesucht werden (z.B. durch Ausprobieren oder mit einem Solver).
:::

```{python}
from scipy.stats import norm
import numpy as np

# Gegebene Daten
r = 4 # Wochen
L = 2 # Wochen
mu_d_weekly = 20
sigma_d_weekly = 8
beta_target = 0.98

# 1. Risikozeitraum
risk_period = r + L
print(f"1. Risikozeitraum: r + L = {r} + {L} = {risk_period} Wochen\n")

# 2. Momente der Nachfrage im Risikozeitraum
mu_risk_period = risk_period * mu_d_weekly
sigma_risk_period = np.sqrt(risk_period) * sigma_d_weekly
print(f"2. Nachfrageparameter im Risikozeitraum ({risk_period} Wochen):")
print(f"   - Erwartungswert (mu_{r+L}): {risk_period} * {mu_d_weekly} = {mu_risk_period:.2f} Paar")
print(f"   - Standardabweichung (sigma_{r+L}): sqrt({risk_period}) * {sigma_d_weekly} = {sigma_risk_period:.2f} Paar\n")

# 3. Optimales Bestellniveau S_opt
# Zielwert für die standardisierte Einheiten-Verlustfunktion
target_G1_v = ((1 - beta_target) * r * mu_d_weekly) / sigma_risk_period

print("3. Optimales Bestellniveau S_opt:")
print(f"   - Zielwert für G_Z(v): (1 - {beta_target}) * {r} * {mu_d_weekly} / {sigma_risk_period:.2f} = {target_G1_v:.4f}")

# Iterative Suche nach v_opt (eine einfache Schleife genügt hier)
v = 0.0
step = 0.001
G1_v = norm.pdf(v) - v * (1 - norm.cdf(v))

while G1_v > target_G1_v:
    v += step
    G1_v = norm.pdf(v) - v * (1 - norm.cdf(v))

v_opt = v
print(f"   - Gefundener optimaler standardisierter Bestellpunkt (v_opt): {v_opt:.4f}")

# Berechnung von S_opt
S_opt = mu_risk_period + v_opt * sigma_risk_period
safety_stock = v_opt * sigma_risk_period

print(f"   - Optimales Bestellniveau S_opt = {mu_risk_period:.2f} + {v_opt:.4f} * {sigma_risk_period:.2f} = {S_opt:.2f}")
print(f"   -> Das Bestellniveau S sollte auf {int(np.ceil(S_opt))} Paar gesetzt werden.")
print(f"   - Der darin enthaltene Sicherheitsbestand beträgt {safety_stock:.2f} Paar.")

```
:::

## Aufgabe 3: Newsvendor mit diskreter Nachfrage

Ein Bäcker muss morgens entscheiden, wie viele eines speziellen Kuchens er für den Tag backen soll. Die Herstellungskosten pro Kuchen betragen 5 GE, der Verkaufspreis liegt bei 12 GE. Nicht verkaufte Kuchen können am Ende des Tages nicht mehr verkauft werden und haben einen Restwert von 0 GE.

Die Nachfrage nach diesem Kuchen ist erfahrungsgemäß wie folgt verteilt:

| Nachfrage (Y) | 8 Kuchen | 9 Kuchen | 10 Kuchen | 11 Kuchen | 12 Kuchen |
| :--- | :---: | :---: | :---: | :---: | :---: |
| Wahrscheinlichkeit P(Y) | 0.10 | 0.20 | 0.35 | 0.25 | 0.10 |

**Ihre Aufgaben:**

1.  **Underage- und Overage-Kosten:** Berechnen Sie die Underage- ($c_U$) und Overage-Kosten ($c_O$).
2.  **Kritisches Verhältnis:** Berechnen Sie das kritische Verhältnis.
3.  **Tabelle der kumulierten Wahrscheinlichkeiten:** Erstellen Sie eine Tabelle mit der kumulierten Wahrscheinlichkeit $F(x)$ für jede mögliche Bestellmenge $x$.
4.  **Optimale Bestellmenge:** Bestimmen Sie die optimale Bestellmenge $x_{opt}$, die der Bäcker backen sollte.

::: {.content-visible when-profile="solution"}
**Lösungshinweise:**

::: {.callout-tip collapse="true" title="Tipps und wichtige Formeln"}

#### Vorgehen bei diskreter Nachfrageverteilung
Das Grundprinzip des Newsvendor-Problems bleibt gleich, aber die Umsetzung ist anders als bei einer stetigen (z.B. normalen) Verteilung.

1.  **Underage- und Overage-Kosten ($c_U, c_O$):** Die Berechnung ist identisch zum stetigen Fall.
2.  **Kritisches Verhältnis:** Die Formel `c_U / (c_O + c_U)` ist ebenfalls identisch.

#### 3. & 4. Optimale Bestellmenge $x_{opt}$ finden

*   Wir können keinen z-Wert verwenden. Stattdessen suchen wir die **kleinste Bestellmenge x**, für die die **kumulierte Wahrscheinlichkeit $F(x) = P(Y \le x)$ größer oder gleich dem kritischen Verhältnis** ist.
*   **Regel:** Finde das kleinste $x$, für das gilt: $F(x) \ge \frac{c_U}{c_O + c_U}$
*   **Vorgehen:**
    1.  Erstelle eine Tabelle mit den möglichen Nachfragewerten.
    2.  Berechne für jeden Wert die Wahrscheinlichkeit $P(Y=x)$.
    3.  Berechne die kumulierte Wahrscheinlichkeit $F(x)$ durch Aufsummieren der Einzelwahrscheinlichkeiten.
    4.  Vergleiche jeden Wert von $F(x)$ mit dem kritischen Verhältnis und wähle die erste Bestellmenge, bei der die Bedingung erfüllt ist.
:::

```{python}
import numpy as np

# Gegebene Daten
herstellungskosten = 5
verkaufspreis = 12
restwert = 0
nachfrage_verteilung = {
    8: 0.10,
    9: 0.20,
    10: 0.35,
    11: 0.25,
    12: 0.10
}

# 1. Underage- und Overage-Kosten
c_U = verkaufspreis - herstellungskosten
c_O = herstellungskosten - restwert

print("1. Kostenberechnung:")
print(f"   - Underage-Kosten (c_U): {verkaufspreis} - {herstellungskosten} = {c_U} GE")
print(f"   - Overage-Kosten (c_O): {herstellungskosten} - {restwert} = {c_O} GE\n")

# 2. Kritisches Verhältnis
critical_ratio = c_U / (c_O + c_U)
print("2. Kritisches Verhältnis:")
print(f"   - Critical Ratio = {c_U} / ({c_O} + {c_U}) = {critical_ratio:.4f}\n")

# 3. & 4. Kumulierte Wahrscheinlichkeiten und optimale Menge
print("3. & 4. Prüfung der optimalen Bestellmenge:")
print("   Bestellmenge (x) | Kumulierte P(Y<=x) | Bedingung erfüllt?")
print("   -------------------|------------------------|--------------------")

demand_levels = sorted(nachfrage_verteilung.keys())
probabilities = [nachfrage_verteilung[d] for d in demand_levels]
cumulative_probabilities = np.cumsum(probabilities)
x_opt = 0
found = False

for i, x in enumerate(demand_levels):
    f_x = cumulative_probabilities[i]
    condition_met = f_x >= critical_ratio
    if condition_met and not found:
        x_opt = x
        found = True
        print(f"   {x:<18} | {f_x:<22.2f} | Ja  <- Optimale Menge")
    else:
        print(f"   {x:<18} | {f_x:<22.2f} | Nein")

print(f"\nDie Bedingung F(x) >= {critical_ratio:.4f} ist erstmals für eine Menge von {x_opt} Kuchen erfüllt.")
print(f"Antwort: Der Bäcker sollte {x_opt} Kuchen backen.")

```
:::

## Aufgabe 4: Bestellpunkt-Politik (s, q) mit Undershoot

Ein Händler für Elektronikbauteile verwendet für ein bestimmtes Bauteil eine $(s, q)$-Politik. Die tägliche Nachfrage $D$ ist normalverteilt mit $\mu_D = 100$ und $\sigma_D = 20$. Die Wiederbeschaffungszeit beträgt $L=5$ Tage. Es wird eine feste Bestellmenge von $q=800$ Stück verwendet.

Das Unternehmen möchte einen $\beta$-Servicegrad von 99% erreichen.

**Ihre Aufgaben:**

1.  **Undershoot:** Berechnen Sie den Erwartungswert $\mathrm{E}\{U\}$ und die Varianz $\operatorname{Var}\{U\}$ des Undershoots. Nehmen Sie an, dass die Nachfrageverteilung normalverteilt ist.
2.  **Nachfrage im Risikozeitraum:** Berechnen Sie den Erwartungswert $\mu_Y$ und die Varianz $\sigma_Y^2$ der Nachfrage im gesamten Risikozeitraum ($Y = Y^{(L)} + U$).
3.  **Optimaler Bestellpunkt:** Bestimmen Sie den optimalen Bestellpunkt $s_{opt}$, der für den angestrebten Servicegrad nötig ist. Nehmen Sie an, dass der Fehlbestand am Anfang eines Zyklus vernachlässigbar klein ist ($G_Y^{(1)}(s+q) \approx 0$).

::: {.content-visible when-profile="solution"}
**Lösungshinweise:**

::: {.callout-tip collapse="true" title="Tipps und wichtige Formeln"}
#### Das Konzept des "Undershoot"

Bei einer $(s,q)$-Politik wird eine Bestellung ausgelöst, sobald der verfügbare Bestand den Bestellpunkt $s$ *erreicht oder unterschreitet*. Da die Nachfrage in diskreten Mengen auftritt, wird der Bestellpunkt oft nicht exakt getroffen, sondern "unterschossen". Dieser Betrag, um den $s$ unterschritten wird, wird als **Undershoot (U)** oder Defizit bezeichnet. Er ist eine Zufallsgröße und muss bei der Berechnung des Sicherheitsbestandes berücksichtigt werden.

#### 1. Berechnung des Undershoots
Für eine normalverteilte Nachfrage $D \sim N(\mu_D, \sigma_D^2)$ können folgende Approximationen verwendet werden:

*   **Erwartungswert:** $\mathrm{E}\{U\} \approx \frac{\sigma_D^2 + \mu_D^2}{2 \mu_D}$
*   **Varianz:** $\operatorname{Var}\{U\} \approx \frac{\sigma_D^2}{2} \left(1 - \frac{\sigma_D^2}{2\mu_D^2}\right) + \frac{\mu_D^2}{12}$

#### 2. Nachfrage im Risikozeitraum

*   Der relevante Risikozeitraum deckt die Nachfrage während der **Wiederbeschaffungszeit ($Y^{(L)}$)** plus den **Undershoot ($U$)** ab.
*   **Gesamtnachfrage im Risikozeitraum:** $Y = Y^{(L)} + U$
*   Da $Y^{(L)}$ und $U$ als unabhängig angenommen werden, addieren sich Erwartungswerte und Varianzen:
    *   $\mu_Y = \mu_{YL} + \mathrm{E}\{U\} = (L \cdot \mu_D) + \mathrm{E}\{U\}$
    *   $\sigma_Y^2 = \sigma_{YL}^2 + \operatorname{Var}\{U\} = (L \cdot \sigma_D^2) + \operatorname{Var}\{U\}$

#### 3. Optimaler Bestellpunkt $s_{opt}$

*   Die Logik ist analog zur $(r,S)$-Politik, aber die Zielgröße für die Einheiten-Verlustfunktion ist anders, da die Bestellmenge $q$ fix ist.
*   **Formel für s:** $s_{opt} = \mu_Y + v_{opt} \cdot \sigma_Y$
*   **Zielbedingung für $v_{opt}$:** Finde das kleinste $v$, für das gilt:
    $G_Z^{(1)}(v) \leq \frac{(1-\beta) \cdot q}{\sigma_Y}$
*   Auch hier muss $v_{opt}$ iterativ gesucht werden.
:::

```{python}
import numpy as np
from scipy.stats import norm

# Gegebene Daten
mu_d = 100
sigma_d = 20
L = 5
q = 800
beta_target = 0.99

# 1. Undershoot-Berechnung
# E(U) = (sigma_d^2 + mu_d^2) / (2 * mu_d)
# Var(U) = Var(D)/2 * (1 - Var(D)/(2*mu_d^2)) + mu_d^2/12
# Annahme: Schiefe E((D-mu_d)^3) = 0 für Normalverteilung
E_U = (sigma_d**2 + mu_d**2) / (2 * mu_d)
Var_D = sigma_d**2
Var_U = Var_D / 2 * (1 - Var_D / (2 * mu_d**2)) + mu_d**2 / 12

print("1. Undershoot (Defizit):")
print(f"   - Erwartungswert E(U): {E_U:.2f}")
print(f"   - Varianz Var(U): {Var_U:.2f}\n")

# 2. Momente der Nachfrage im Risikozeitraum
# Y = Y_L + U
mu_YL = L * mu_d
Var_YL = L * Var_D

mu_Y = mu_YL + E_U
Var_Y = Var_YL + Var_U
sigma_Y = np.sqrt(Var_Y)

print("2. Nachfrage im Risikozeitraum (Y = Y_L + U):")
print(f"   - Erwartungswert mu_Y: {mu_YL:.2f} + {E_U:.2f} = {mu_Y:.2f}")
print(f"   - Varianz Var_Y: {Var_YL:.2f} + {Var_U:.2f} = {Var_Y:.2f}")
print(f"   - Standardabweichung sigma_Y: {sigma_Y:.2f}\n")

# 3. Optimaler Bestellpunkt s_opt
# G_Z(v) <= (1 - beta) * q / sigma_Y
target_G1_v = (1 - beta_target) * q / sigma_Y

print("3. Optimaler Bestellpunkt s_opt:")
print(f"   - Zielwert für G_Z(v): (1 - {beta_target}) * {q} / {sigma_Y:.2f} = {target_G1_v:.4f}")

# Iterative Suche nach v_opt
v = 0.0
step = 0.001
G1_v = norm.pdf(v) - v * (1 - norm.cdf(v))
while G1_v > target_G1_v:
    v += step
    G1_v = norm.pdf(v) - v * (1 - norm.cdf(v))

v_opt = v
s_opt = mu_Y + v_opt * sigma_Y
safety_stock = v_opt * sigma_Y

print(f"   - Gefundener v_opt: {v_opt:.4f}")
print(f"   - Optimaler Bestellpunkt s_opt = {mu_Y:.2f} + {v_opt:.4f} * {sigma_Y:.2f} = {s_opt:.2f}")
print(f"   -> Der Bestellpunkt s sollte auf {int(np.ceil(s_opt))} Stück gesetzt werden.")
print(f"   - Der Sicherheitsbestand beträgt {safety_stock:.2f} Stück.")

```
:::