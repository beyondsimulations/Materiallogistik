---
title: "Übung 01"
subtitle: "Materialbedarfsermittlung und Bedarfsmuster"
format:
    html:
        theme: [sandstone, ../styles.scss]
        highlight-style: arrow
        linkcolor: "#a60000"
        echo: false
        code-overflow: wrap
    typst:
        papersize: a4
        echo: false
---

```{=typst}
#pagebreak()
```

## Aufgabe 1: Materialbedarfsermittlung

Ein Fahrradhersteller in Münster plant die Produktion seines neuen E-Bike-Modells "UrbanCruiser". Die Endmontage des Fahrrads erfordert verschiedene Komponenten, deren Beziehungen in der folgenden Stückliste dargestellt sind.

**Struktur des "UrbanCruiser" (E):**

- 1x Rahmen-Set (R)
  - 1x Hauptrahmen (H)
  - 1x Gabel (G)
- 2x Rad (W)
- 1x Antriebs-Set (A)

**Produktionsplan:**

Der Produktionsplan (Primärbedarf) sieht vor, in Periode 10 genau 50 "UrbanCruiser" fertigzustellen.

**Stammdaten der Komponenten:**

| Komponente | Lagerbestand | Vorlaufzeit (Perioden) |
|------------|--------------|------------------------|
| E (UrbanCruiser) | 5            | 1                      |
| R (Rahmen-Set)   | 10           | 2                      |
| W (Rad)          | 30           | 3                      |
| A (Antriebs-Set) | 15           | 2                      |
| H (Hauptrahmen)  | 20           | 2                      |
| G (Gabel)        | 8            | 1                      |

**Ihre Aufgaben:**

1.  **Gozinto-Graph zeichnen:** Zeichnen Sie die Produktstruktur als Gozinto-Graph.
2.  **Materialbedarfsermittlung:** Führen Sie eine Materialbedarfsermittlung durch. Berechnen Sie den Brutto- und Nettobedarf für jede Komponente.
3.  **Bestellzeitpunkte:** Bestimmen Sie die Bestellzeitpunkte für die Komponenten, um den Produktionsplan einzuhalten.

::: {.content-visible when-profile="solution"}

```{=typst}
#pagebreak()
```

**Lösungshinweise:**

::: {.callout-tip collapse="true" title="Tipps und wichtige Formeln"}
#### Vorgehensweise bei der Bedarfsermittlung
Die Materialbedarfsermittlung erfolgt **top-down** durch die Stücklistenstruktur, von der höchsten Dispositionsstufe (0) zu den niedrigsten.

1.  **Stufe 0 (Endprodukt):**
    *   **Bruttobedarf:** Der gegebene Primärbedarf aus dem Produktionsplan.
    *   **Nettobedarf:** `Nettobedarf = Bruttobedarf - Lagerbestand`. Dies ist die Menge, die tatsächlich produziert werden muss.
    *   **Bestelltermin:** `Bestelltermin = Bedarfstermin - Vorlaufzeit`. Dies ist der Zeitpunkt, an dem die Produktion des Endprodukts starten muss.

2.  **Nächste Stufen (Komponenten/Baugruppen):**
    *   **Bruttobedarf:** Der Bruttobedarf einer Komponente leitet sich aus dem **Nettobedarf** der übergeordneten Baugruppe ab. Der Starttermin der Baugruppe wird zum Bedarfstermin der Komponente.
        `Bruttobedarf (Komponente) = Nettobedarf (Baugruppe) * Bedarfskoeffizient (Menge pro Baugruppe)`
    *   **Nettobedarf & Bestelltermin:** Werden für jede Komponente analog zur Stufe 0 berechnet.
:::

**1. Gozinto-Graph:**

Der Gozinto-Graph visualisiert die "geht-in-Beziehung" der Komponenten.

```{python}
#| label: fig-task1
#| fig-cap: "Gozinto-Graph für UrbanCruiser"
import graphviz

dot = graphviz.Digraph(comment='Gozinto-Graph')
dot.node('E', 'UrbanCruiser (E)')
dot.node('R', 'Rahmen-Set (R)')
dot.node('W', 'Rad (W)')
dot.node('A', 'Antriebs-Set (A)')
dot.node('H', 'Hauptrahmen (H)')
dot.node('G', 'Gabel (G)')

dot.edge('R', 'E', label='1')
dot.edge('W', 'E', label='2')
dot.edge('A', 'E', label='1')
dot.edge('H', 'R', label='1')
dot.edge('G', 'R', label='1')

dot
```

**2. & 3. Materialbedarfsermittlung:**

Wir berechnen den Bedarf rekursiv, beginnend bei der obersten Ebene (Dispositionsstufe 0).

**Dispositionsstufe 0: UrbanCruiser (E)**

- **Bruttobedarf in P10:** 50 Stück
- **Lagerbestand:** 5 Stück
- **Nettobedarf in P10:** 50 - 5 = 45 Stück
- **Bestellzeitpunkt:** P10 - 1 (Vorlaufzeit) = **P9**

Der Nettobedarf von 45 Stück für E wird zum Bruttobedarf für die Komponenten der nächsten Stufe.

**Dispositionsstufe 1: Rahmen-Set (R), Rad (W), Antriebs-Set (A)**

*   **Rahmen-Set (R):**
    - **Bruttobedarf in P9:** 1 * 45 = 45 Stück
    - **Lagerbestand:** 10 Stück
    - **Nettobedarf in P9:** 45 - 10 = 35 Stück
    - **Bestellzeitpunkt:** P9 - 2 = **P7**

*   **Rad (W):**
    - **Bruttobedarf in P9:** 2 * 45 = 90 Stück
    - **Lagerbestand:** 30 Stück
    - **Nettobedarf in P9:** 90 - 30 = 60 Stück
    - **Bestellzeitpunkt:** P9 - 3 = **P6**

*   **Antriebs-Set (A):**
    - **Bruttobedarf in P9:** 1 * 45 = 45 Stück
    - **Lagerbestand:** 15 Stück
    - **Nettobedarf in P9:** 45 - 15 = 30 Stück
    - **Bestellzeitpunkt:** P9 - 2 = **P7**

**Dispositionsstufe 2: Hauptrahmen (H), Gabel (G)**

Der Nettobedarf von 35 Rahmen-Sets (R) wird zum Bruttobedarf für H und G.

*   **Hauptrahmen (H):**
    - **Bruttobedarf in P7:** 1 * 35 = 35 Stück
    - **Lagerbestand:** 20 Stück
    - **Nettobedarf in P7:** 35 - 20 = 15 Stück
    - **Bestellzeitpunkt:** P7 - 2 = **P5**

*   **Gabel (G):**
    - **Bruttobedarf in P7:** 1 * 35 = 35 Stück
    - **Lagerbestand:** 8 Stück
    - **Nettobedarf in P7:** 35 - 8 = 27 Stück
    - **Bestellzeitpunkt:** P7 - 1 = **P6**

**Zusammenfassung der Bestellungen:**

```{python}
import pandas as pd
import matplotlib.pyplot as plt

plt.rcdefaults()
plt.style.use('tableau-colorblind10')

data = {
    'Komponente': ['Hauptrahmen (H)', 'Gabel (G)', 'Rad (W)', 'Rahmen-Set (R)', 'Antriebs-Set (A)', 'UrbanCruiser (E)'],
    'Bestellmenge (Nettobedarf)': [15, 27, 60, 35, 30, 45],
    'Bestellperiode': [5, 6, 6, 7, 7, 9]
}
df_bestellungen = pd.DataFrame(data).sort_values('Bestellperiode')
print(df_bestellungen.to_string(index=False))
```

:::

```{=typst}
#pagebreak()
```

## Aufgabe 2: Analyse von Bedarfsmustern

Ein Online-Shop für Kaffeebohnen möchte das Verbrauchsmuster einer speziellen Sorte analysieren, um die Lagerhaltung zu optimieren. 

Die Verkaufszahlen (in kg) der letzten 12 Wochen liegen vor:

`[5, 8, 6, 25, 7, 4, 9, 5, 30, 6, 7, 8]`

**Ihre Aufgaben:**

1.  **Grafische Darstellung:** Stellen Sie die Zeitreihe grafisch dar.
2.  **Durchschnittlicher Bedarf:** Berechnen Sie den durchschnittlichen wöchentlichen Bedarf.
3.  **Mittlere absolute Abweichung:** Berechnen Sie die mittlere absolute Abweichung (MAD), um die Prognosegüte bei Annahme eines konstanten Verbrauchs (Mittelwert) zu bewerten.
4.  **Störpegel:** Berechnen Sie den Störpegel (Variationskoeffizient).
5.  **Klassifizierung:** Klassifizieren Sie das Bedarfsmuster basierend auf Ihren Berechnungen. Handelt es sich um einen konstanten, trendförmigen, sporadischen oder unregelmäßigen Bedarf? Begründen Sie Ihre Entscheidung.

::: {.content-visible when-profile="solution"}

```{=typst}
#pagebreak()
```

**Lösungshinweise:**

::: {.callout-tip collapse="true" title="Tipps und wichtige Formeln"}
#### Die wichtigsten Kennzahlen zur Bedarfsanalyse

*   **Durchschnittlicher Bedarf ($\bar{x}$):** Der Mittelwert der Nachfrage über den betrachteten Zeitraum. Dient als Basis für einfache Prognosen.
    $\bar{x} = \frac{1}{n} \sum_{t=1}^{n} d_t$

*   **Mittlere Absolute Abweichung (MAD):** Gibt die durchschnittliche absolute Prognoseabweichung an, wenn man den Mittelwert als Prognose verwendet. Ein Maß für die Streuung.
    $MAD = \frac{1}{n} \sum_{t=1}^{n} |d_t - \bar{x}|$

*   **Störpegel (SP):** Das wichtigste Maß zur Klassifizierung. Es setzt die mittlere absolute Abweichung ins Verhältnis zum Mittelwert und ist damit eine relative Kennzahl zur Beurteilung der Prognosegenauigkeit.
    $SP = \frac{MAD}{\bar{x}}$

#### Typische Grenzen für die Klassifizierung
*   **SP < 0,25:** Konstanter / gleichmäßiger Bedarf (gut prognostizierbar)
*   **0,25 $\le$ SP $\le$ 0,5:** Trendförmiger oder saisonaler Bedarf (regelmäßige Schwankungen)
*   **SP > 0,5:** Unregelmäßiger / erratischer Bedarf (schwer prognostizierbar)
*   **Zusatzkriterium für "sporadisch":** Wenn zusätzlich zum hohen SP viele Perioden einen Bedarf von Null aufweisen.
:::

```{python}
#| label: fig-task2
#| fig-cap: "Wöchentlicher Verkauf 'Äthiopischer Yirgacheffe'"
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

plt.rcdefaults()
plt.style.use('tableau-colorblind10')

# Daten
sales_data = np.array([5, 8, 6, 25, 7, 4, 9, 5, 30, 6, 7, 8])
weeks = np.arange(1, len(sales_data) + 1)

# 1. Grafische Darstellung
plt.figure(figsize=(8, 5))
plt.plot(weeks, sales_data, marker='o', linestyle='-', label='Verkauf (kg)')
plt.title("Wöchentlicher Verkauf 'Äthiopischer Yirgacheffe'")
plt.xlabel("Woche")
plt.ylabel("Verkaufte Menge (kg)")
plt.xticks(weeks)
plt.grid(True)

# 2. Durchschnittlicher Bedarf
mean_demand = np.mean(sales_data)
plt.axhline(y=mean_demand, color='r', linestyle='--', label=f'Mittelwert ({mean_demand:.2f} kg)')
plt.legend()
plt.show()

# 3. Mittlere Absolute Abweichung (MAD)
mad = np.mean(np.abs(sales_data - mean_demand))

# 4. Störpegel
# SP = Mittlere Absolute Abweichung / Mittelwert
sp = mad / mean_demand

print(f"2. Durchschnittlicher Bedarf: {mean_demand:.2f} kg/Woche")
print(f"3. Mittlere Absolute Abweichung (MAD): {mad:.2f} kg")
print(f"4. Störpegel: {sp:.2f}")

```

**5. Klassifizierung des Bedarfsmusters:**

- **Visuelle Analyse:** Die Grafik zeigt eine relativ stabile Nachfrage mit zwei deutlichen Ausreißern nach oben in den Wochen 4 und 9. Es ist kein klarer Trend (steigend oder fallend) und keine regelmäßige Saisonalität erkennbar.

- **Kennzahlenanalyse:**
    - Der **durchschnittliche Bedarf** liegt bei 10.00 kg.
    - Die **mittlere absolute Abweichung (MAD)** von 5.83 kg ist im Verhältnis zum Mittelwert recht hoch. Sie zeigt, dass die einzelnen Werte im Schnitt stark vom Mittelwert abweichen.
    - Der **Störpegel** ist mit 0.58 ein entscheidender Indikator. In der Literatur werden oft folgende Grenzen verwendet:
        - SP < 0.25: Konstanter/glatter Bedarf
        - 0.25 <= SP <= 0.5: Schwankender, aber noch regelmäßiger Bedarf
        - SP > 0.5: Stark unregelmäßiger (erratischer) Bedarf

**Fazit:**
Mit einem Störpegel von 0.58 liegt ein **stark unregelmäßiger (erratischer) Bedarf** vor. Die Nachfrage ist schwer prognostizierbar. Die beiden hohen Spitzen deuten auf zufällige, große Bestellungen hin. Ein einfacher Prognoseansatz wie der gleitende Durchschnitt oder die exponentielle Glättung würde hier wahrscheinlich zu hohen Prognosefehlern führen. Für solche Artikel sind Sicherheitsbestände oft die bessere Strategie als eine verbrauchsgesteuerte Disposition. Da es keine Perioden mit Null-Bedarf gibt, ist die Klassifizierung "sporadisch" weniger passend als "erratisch".

:::

```{=typst}
#pagebreak()
```

## Aufgabe 3: ABC-Analyse

Ein Unternehmen aus Duisburg möchte seine Lagerartikel klassifizieren, um die Management-Anstrengungen zu priorisieren. Die folgenden Daten für 10 Artikel sind verfügbar:

| Artikel-Nr. | Jahresbedarf (Stück) | Preis pro Stück (€) |
|-------------|----------------------|---------------------|
| 1           | 1.000                | 50,00               |
| 2           | 500                  | 300,00              |
| 3           | 12.000               | 5,00                |
| 4           | 400                  | 450,00              |
| 5           | 8.000                | 2,00                |
| 6           | 300                  | 10,00               |
| 7           | 2.500                | 25,00               |
| 8           | 15.000               | 1,00                |
| 9           | 700                  | 150,00              |
| 10          | 5.000                | 8,00                |

**Ihre Aufgaben:**

1.  **Jährlichen Verbrauchswert berechnen:** Berechnen Sie für jeden Artikel den jährlichen Verbrauchswert.
2.  **Rangliste erstellen:** Erstellen Sie eine Rangliste der Artikel nach ihrem Verbrauchswert in absteigender Reihenfolge.
3.  **Prozentuale Anteile berechnen:** Berechnen Sie den prozentualen Anteil jedes Artikels am Gesamtverbrauchswert und an der Gesamtmenge aller Artikel.
4.  **Kumulierte Anteile berechnen:** Berechnen Sie die kumulierten prozentualen Anteile am Wert und an der Menge.
5.  **ABC-Klassifizierung:** Teilen Sie die Artikel in die Klassen A, B und C ein. Verwenden Sie typische Grenzen (z.B. A-Güter: ~80% Wertanteil, B-Güter: ~15% Wertanteil, C-Güter: ~5% Wertanteil).
6.  **Grafische Darstellung:** Stellen Sie das Ergebnis grafisch in einem Diagramm dar (Lorenz-Kurve).

::: {.content-visible when-profile="solution"}

```{=typst}
#pagebreak()
```

**Lösungshinweise:**

::: {.callout-tip collapse="true" title="Tipps und wichtige Formeln"}
#### Das Prinzip der ABC-Analyse
Die ABC-Analyse basiert auf dem **Pareto-Prinzip (80-20-Regel)**, das besagt, dass oft ein kleiner Teil der Ursachen für einen großen Teil der Wirkung verantwortlich ist. Übertragen auf die Lagerhaltung bedeutet das: Ein kleiner Prozentsatz der Artikelpositionen verursacht einen großen Prozentschaft des gesamten Kapitalbedarfs (Verbrauchswert).

#### Schrittweises Vorgehen
1.  **Verbrauchswert berechnen:** Das ist die wichtigste Kennzahl.
    `Verbrauchswert = Jahresbedarf * Preis pro Stück`
2.  **Sortieren:** Die Artikel absteigend nach ihrem Verbrauchswert sortieren.
3.  **Prozentuale Anteile berechnen:** Für jeden Artikel seinen Anteil am Gesamtwert bestimmen.
    `Wertanteil (%) = (Verbrauchswert / Gesamtverbrauchswert) * 100`
4.  **Kumulieren:** Die prozentualen Wertanteile von oben nach unten aufsummieren.
5.  **Klassen zuordnen:** Die kumulierten Wertanteile nutzen, um die Klassen A, B und C zu definieren. Die Grenzen sind nicht starr, aber typische Werte sind:
    *   **A-Güter:** die Artikel, die zusammen ca. 70-80% des Wertes ausmachen.
    *   **B-Güter:** die nächsten Artikel, die zusammen ca. 15-20% des Wertes ausmachen.
    *   **C-Güter:** die restlichen Artikel mit den geringsten Wertanteilen (ca. 5-10%).
:::

```{python}
#| label: fig-task3
#| fig-cap: "ABC-Analyse der Lagerartikel"
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick

plt.rcdefaults()
plt.style.use('tableau-colorblind10')

# Daten
data_task3 = {
    'Artikel-Nr.': range(1, 11),
    'Jahresbedarf': [1000, 500, 12000, 400, 8000, 300, 2500, 15000, 700, 5000],
    'Preis': [50, 300, 5, 450, 2, 10, 25, 1, 150, 8]
}
df = pd.DataFrame(data_task3)

# 1. Jährlichen Verbrauchswert berechnen
df['Verbrauchswert'] = df['Jahresbedarf'] * df['Preis']

# 2. Rangliste erstellen
df_sorted = df.sort_values(by='Verbrauchswert', ascending=False).reset_index(drop=True)

# 3. Prozentuale Anteile berechnen
total_wert = df_sorted['Verbrauchswert'].sum()
total_menge = df_sorted['Jahresbedarf'].sum()
df_sorted['Wertanteil (%)'] = (df_sorted['Verbrauchswert'] / total_wert) * 100
df_sorted['Mengenanteil (%)'] = (df_sorted['Jahresbedarf'] / total_menge) * 100

# 4. Kumulierte Anteile berechnen
df_sorted['Kum. Wertanteil (%)'] = df_sorted['Wertanteil (%)'].cumsum()
df_sorted['Kum. Mengenanteil (%)'] = df_sorted['Mengenanteil (%)'].cumsum()
df_sorted['Kum. Artikelanteil (%)'] = (np.arange(len(df_sorted)) + 1) / len(df_sorted) * 100


# 5. ABC-Klassifizierung
def abc_klassifizierung(kum_wertanteil):
    if kum_wertanteil <= 80:
        return 'A'
    elif kum_wertanteil <= 95:
        return 'B'
    else:
        return 'C'

df_sorted['ABC-Klasse'] = df_sorted['Kum. Wertanteil (%)'].apply(abc_klassifizierung)

print("Tabelle zur ABC-Analyse:")
print(df_sorted.round(2).to_string())


# 6. Grafische Darstellung (Lorenz-Kurve)
fig, ax1 = plt.subplots(figsize=(10, 6))

ax1.set_xlabel('Anteil der Artikelpositionen (%)')
ax1.set_ylabel('Kumulierter Wertanteil (%)', color='blue')
ax1.plot(df_sorted['Kum. Artikelanteil (%)'], df_sorted['Kum. Wertanteil (%)'], marker='o', color='blue', label='Kum. Wertanteil')
ax1.tick_params(axis='y', labelcolor='blue')
ax1.yaxis.set_major_formatter(mtick.PercentFormatter())
ax1.xaxis.set_major_formatter(mtick.PercentFormatter())

# Grenzen für ABC einzeichnen
ax1.axhline(y=80, color='gray', linestyle='--', linewidth=0.8)
ax1.axhline(y=95, color='gray', linestyle='--', linewidth=0.8)
# Find where the lines cross
a_grenze_artikel = df_sorted.loc[df_sorted['ABC-Klasse'] == 'A', 'Kum. Artikelanteil (%)'].max()
b_grenze_artikel = df_sorted.loc[df_sorted['ABC-Klasse'] == 'B', 'Kum. Artikelanteil (%)'].max()
ax1.axvline(x=a_grenze_artikel, color='gray', linestyle='--', linewidth=0.8)
if pd.notna(b_grenze_artikel):
    ax1.axvline(x=b_grenze_artikel, color='gray', linestyle='--', linewidth=0.8)

# Text für Zonen
ax1.text(a_grenze_artikel/2, 40, 'A-Güter', fontsize=15, ha='center', va='center', bbox=dict(boxstyle='round,pad=0.3', fc='aliceblue', ec='none', alpha=0.8))
if pd.notna(b_grenze_artikel):
    ax1.text((a_grenze_artikel + b_grenze_artikel)/2, 87.5, 'B-Güter', fontsize=12, ha='center', va='center', bbox=dict(boxstyle='round,pad=0.3', fc='aliceblue', ec='none', alpha=0.8))
ax1.text((b_grenze_artikel + 100)/2 if pd.notna(b_grenze_artikel) else (a_grenze_artikel + 100)/2, 97.5, 'C-Güter', fontsize=10, ha='center', va='center', bbox=dict(boxstyle='round,pad=0.3', fc='aliceblue', ec='none', alpha=0.8))


plt.title('ABC-Analyse (Lorenz-Kurve)')
fig.tight_layout()
plt.grid(True)
plt.show()

```

**Interpretation der Ergebnisse:**

- **A-Güter:** Die Artikel 4, 2, 9 und 7 sind A-Güter. Sie machen 40% der Artikelpositionen aus, binden aber rund 73% des Gesamtwertes. Diese Artikel erfordern die größte Aufmerksamkeit (z.B. genaue Bestandsführung, häufige Bestellungen, gute Lieferantenbeziehungen).
- **B-Güter:** Die Artikel 3 und 1 sind B-Güter. Sie stellen die nächste Gruppe dar und erfordern eine standardmäßige Behandlung.
- **C-Güter:** Die restlichen Artikel (10, 5, 8, 6) sind C-Güter. Sie haben einen sehr geringen Wertanteil, aber einen hohen Mengenanteil. Hier können vereinfachte Dispositionsverfahren (z.B. hohe Sicherheitsbestände, seltenere Bestellungen) angewendet werden, um den Verwaltungsaufwand zu reduzieren.

:::
